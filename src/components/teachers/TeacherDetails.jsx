import React, { useEffect, useState } from 'react'
import { connect } from 'react-redux'
import teachersService from '../../services/teachers'
import { setNotification } from '../../reducers/notificationReducer'
import moment from 'moment'
import 'moment-precise-range-plugin'
import { nestedSort } from '../../utils/arrayHelpers'

import { Container, Row, Col, Card, Form } from 'react-bootstrap'
import LoadingIndicator from '../common/LoadingIndicator'
import PaymentDescr from './PaymentDescr'
import Emoji from '../common/Emoji'

const TeacherDetails = ({ user, match, setNotification }) => {

	const [teacherDetails, setTeacherDetails] = useState(null)
	const [teacherExperience, setTeacherExperience] = useState({})
	const [descPayPupilNameSortOrder, setDescPayPupilNameSortOrder] = useState(false)
	const [descPayDateSortOrder, setDescPayDateSortOrder] = useState(true)

	const cardStyle = 'mb-3'

	// date now
	const today = moment(new Date())
	// start and end date of the current school year
	const startOfSchoolYear = moment([today.get('year') - 1, 8, 1])
	const endOfSchoolYear = moment([today.get('year'), 5, 1])
	const dates = {
		today,
		startOfSchoolYear,
		endOfSchoolYear
	}

	const calcXpToDate = ({ employmentDate, experienceToDate }) => {
		const { years, months, days } = experienceToDate
		const adjustedExperienceDate = moment(employmentDate).subtract({ years, months, days })
		const experience = moment.preciseDiff(adjustedExperienceDate, today, true)
		setTeacherExperience(experience)
	}

	const sortByField = ({ checked, id }) => {
		const order = checked ? 'desc' : 'asc'
		switch (id) {
		case 'pupil':
			setDescPayPupilNameSortOrder(checked)
			setTeacherDetails({
				...teacherDetails,
				payments: teacherDetails.payments.sort(nestedSort('paymentDescr', id, order))
			})
			break
		case 'create_date':
			setDescPayDateSortOrder(checked)
			setTeacherDetails({
				...teacherDetails,
				payments: teacherDetails.payments.sort(nestedSort(id, null, order))
			})
			break
		default:
			console.warn('Check sort criteria.')
		}
	}

	useEffect(() => {
		if (user) {
			teachersService.setToken(user.token)
			teachersService.getById(match.params.id)
				.then((data) => {
					setTeacherDetails({
						...data,
						payments: data.payments.sort(nestedSort('create_date', null, 'desc'))
					})
					calcXpToDate(data)
				})
				.catch(error => {
					const notification = JSON.parse(error.request.responseText)
					setNotification({
						message: notification.error,
						variant: 'danger'
					}, 5)
				})
		}
	// eslint-disable-next-line
	}, [user])

	return (
		<>
			{teacherDetails
				? <Container className="pt-3">
					<Row>
						<Col>
							<h6>
								{/* eslint-disable-next-line */}
								<Emoji label="Magnifying Glass Tilted Right" emoji={'üîé'} /> –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—á—ñ—Ç–µ–ª—è
							</h6>
							{/* Teacher info */}
							<Card className={cardStyle}>
								<Card.Body>
									<Card.Text>
										<strong>{teacherDetails.name}</strong> - {teacherDetails.employeeType}<br />
										{teacherDetails.specialties.map(specialty => (
											<span key={specialty.id}>{specialty.title}</span>
										))}
									</Card.Text>
									<Card.Text>
										–ü—Ä–∞—Ü—é—î –∑: {moment(teacherDetails.employmentDate).format('LL')}
									</Card.Text>
									<Card.Text>
										{/* eslint-disable-next-line */}
										–ü–æ–≤–Ω–∏–π —Å—Ç–∞–∂ —Å —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ: {teacherExperience.years} —Ä–æ–∫—ñ–≤ {teacherExperience.months} –º—ñ—Å—è—Ü—ñ–≤ {teacherExperience.days} –¥–Ω—ñ–≤
									</Card.Text>
									<Card.Text>
										{/* eslint-disable-next-line */}
										–î–æ–¥–∞—Ç–∫–æ–≤—ñ–π —Å—Ç–∞–∂: {teacherDetails.experienceToDate.years} —Ä–æ–∫—ñ–≤ {teacherDetails.experienceToDate.months} –º—ñ—Å—è—Ü—ñ–≤ {teacherDetails.experienceToDate.days} –¥–Ω—ñ–≤
									</Card.Text>
									<Card.Text>
										–†–æ–∑—Ä—è–¥: {teacherDetails.category}
									</Card.Text>
									<Card.Text>
										{teacherDetails.isAdministration ? '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è ' : null }
										{teacherDetails.isRetired ? '–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä ' : null }
										{teacherDetails.employeeIsAStudent ? '–ù–∞–≤—á–∞–µ—Ç—Å—è —É –í–ù–ó' : null }
									</Card.Text>
									<Card.Text>
										–ö–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {teacherDetails.qualification}
									</Card.Text>
									<Card.Text>
										–ü–µ–¥–∞–≥–æ–≥—ñ—á–Ω–µ –∑–≤–∞–Ω–Ω—è: {teacherDetails.teacherTitle}
									</Card.Text>
									<Card.Text>
										–ù–∞—É–∫–æ–≤–∞ —Å—Ç—É–ø—ñ–Ω—å: {teacherDetails.scienceDegree}
									</Card.Text>
								</Card.Body>
							</Card>

							{/* Contacts */}
							<Card className={cardStyle}>
								<Card.Body>
									<Card.Subtitle className="mb-2 text-muted">
										<Emoji label="Telephone Receiver" emoji={'üìû'} /> –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ
									</Card.Subtitle>
									<Card.Text>
										–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞: <a href={`mailto:${teacherDetails.contactEmail}`}>
											{teacherDetails.contactEmail}
										</a>
									</Card.Text>
									<Card.Text>
										–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π ‚Ññ: {teacherDetails.phone}
									</Card.Text>
									<Card.Text>
										{/* eslint-disable-next-line */}
										–ú—ñ—Å—Ü–µ–≤—ñ—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è: {teacherDetails.residence === '–ú—ñ—Å—Ç–æ'
											? <Emoji label="Cityscape" emoji={'üèôÔ∏è'} />
											: <Emoji label="House with Garden" emoji={'üè°'} />}
											&nbsp;{teacherDetails.residence}
									</Card.Text>
								</Card.Body>
							</Card>

							{/* Personal info */}
							<Card className={cardStyle}>
								<Card.Body>
									<Card.Subtitle className="mb-2 text-muted">
										<Emoji label="Memo" emoji={'üìù'} /> –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
									</Card.Subtitle>
									<Card.Text>
										{/* eslint-disable-next-line */} {/* no gender diversity ( */}
										–°—Ç–∞—Ç—å: {teacherDetails.gender === '–ß–æ–ª–æ–≤—ñ—á–∞'
											? <Emoji label="Man" emoji={'üë®'} />
											: <Emoji label="Woman" emoji={'üë©'} />}
											&nbsp;{teacherDetails.gender}
									</Card.Text>
									<Card.Text>
										–°—ñ–º–µ—ó–Ω–∏–π —Å—Ç–∞–Ω: {teacherDetails.maritalStatus}
									</Card.Text>
								</Card.Body>
							</Card>

							{/* Education info */}
							<Card className={cardStyle}>
								<Card.Body>
									<Card.Subtitle className="mb-2 text-muted">
										<Emoji label="Graduation Cap" emoji={'üéì'} /> –û—Å–≤—ñ—Ç–∞
									</Card.Subtitle>
									<Card.Text>
										–ù–∞–≤—á–∞–ª—å–Ω–∏–π –∑–∞–∫–ª–∞–¥: {teacherDetails.university}
									</Card.Text>
									<Card.Text>
										–û—Å–≤—ñ—Ç–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å: {teacherDetails.educationType}
									</Card.Text>
									<Card.Text>
										–û—Å–≤—ñ—Ç–Ω—å–æ-–∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ–π–Ω–∏–π —Ä—ñ–≤–µ–Ω—å: {teacherDetails.educationDegree}
									</Card.Text>
								</Card.Body>
							</Card>

							{/* Additinal info */}
							<Card className={cardStyle}>
								<Card.Body>
									<Card.Subtitle className="mb-2 text-muted">
										<Emoji label="Green Book" emoji={'üìó'} /> –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
									</Card.Subtitle>
									<Card.Text>
										{teacherDetails.info || '–ù–µ–º–∞—î'}
									</Card.Text>
								</Card.Body>
							</Card>

							<h6>
								<Emoji label="Dollar Banknote" emoji={'üíµ'} /> –ü–ª–∞—Ç–µ–∂—ñ:
							</h6>
							{/* Sorting controls */}
							<Form>
								<Form.Check
									custom
									inline
									type="checkbox"
									id="pupil"
									label="–Ü–º'—è —É—á–Ω—è –Ø-–ê"
									checked={descPayPupilNameSortOrder}
									onChange={event => sortByField(event.target)}
								/>
								<Form.Check
									custom
									inline
									type="checkbox"
									id="create_date"
									label={`–î–∞—Ç–∞ –æ–ø–ª–∞—Ç–∏ ${descPayDateSortOrder ? ' - –Ω–æ–≤—ñ –≤–≥–æ—Ä—ñ' : ''}`}
									checked={descPayDateSortOrder}
									onChange={event => sortByField(event.target)}
								/>
							</Form>

							{teacherDetails.payments.map(payment => (
								<Container
									key={payment.id}
									className="payment-description-container border rounded my-2"
								>
									<PaymentDescr
										data={payment}
										dates={dates}
									/>
								</Container>
							))}
						</Col>
					</Row>
				</Container>
				: <LoadingIndicator animation="border" variant="primary" />
			}
		</>
	)
}

const mapStateToProps = state => {
	return {
		user: state.user
	}
}

const mapDispatchToProps = {
	setNotification
}

export default connect(
	mapStateToProps,
	mapDispatchToProps
)(TeacherDetails)
